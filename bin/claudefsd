#!/bin/bash

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Source the dependency checker
source "$(dirname "$0")/claudefsd-check-dependencies"

# Function to get saved editor preference
get_saved_editor() {
    if [ -f ~/.claudefsd ]; then
        grep "^editor=" ~/.claudefsd | cut -d'=' -f2
    fi
}

# Function to save editor preference
save_editor_preference() {
    echo "editor=$1" > ~/.claudefsd
}

# Function to determine default choice based on existing docs
get_default_choice() {
    if [ ! -f BRIEF.md ]; then
        echo "0"
    elif [ ! -f docs/REQUIREMENTS.md ] && [ ! -f docs/QUESTIONS.md ]; then
        echo "1"  # Interactive interview (recommended)
    elif [ -f docs/REQUIREMENTS.md ] && [ ! -f docs/PLAN.md ]; then
        echo "3"  # Create plan from requirements
    elif [ -f docs/QUESTIONS.md ] && [ ! -f docs/PLAN.md ]; then
        echo "3"  # Create plan from questions
    else
        echo "4"  # Development mode
    fi
}

# Function to display the menu
show_menu() {
    echo -e "${GREEN}🤖 Claude Full Self Drive (FSD) Tool${NC}"
    echo
    echo "This tool helps you manage development projects using AI agents."
    echo "Think of it as your AI-powered development team on autopilot!"
    echo
    echo "What would you like to do?"
    echo
    
    local default_choice=$(get_default_choice)
    
    if [ ! -f BRIEF.md ]; then
        echo "  0) Create project brief - Start your project with a BRIEF.md file"
    fi
    
    # Check if we should show new or old interview flow
    if [ -f docs/INTERVIEW-SESSION.json ]; then
        local session_status=$(jq -r '.status' docs/INTERVIEW-SESSION.json 2>/dev/null || echo "unknown")
        if [ "$session_status" = "in_progress" ]; then
            echo "  1) Interactive interview - Resume existing interview session"
        else
            echo "  1) Interactive interview - Gather requirements through expert Q&A"
        fi
    else
        echo "  1) Interactive interview - Gather requirements through expert Q&A [RECOMMENDED]"
    fi
    
    echo "  2) Batch questions - Generate all questions at once (alternative to interview)"
    
    # Show create plan option based on what exists
    if [ -f docs/REQUIREMENTS.md ]; then
        echo "  3) Create plan - Generate development plan from requirements"
    elif [ -f docs/QUESTIONS.md ]; then
        echo "  3) Create plan - Generate plan from answered questions"
    else
        echo "  3) [Requires interview or questions first]"
    fi
    
    echo "  4) Development mode - AI agents work on coding tasks"
    echo "  5) Exit"
    echo
    
    # Show status of required files
    echo "Current status:"
    [ -f BRIEF.md ] && echo "  ✓ BRIEF.md exists" || echo "  ✗ BRIEF.md missing"
    
    # Show interview session status if exists
    if [ -f docs/INTERVIEW-SESSION.json ]; then
        local session_status=$(jq -r '.status' docs/INTERVIEW-SESSION.json 2>/dev/null || echo "unknown")
        local total_questions=$(jq -r '.question_count.total' docs/INTERVIEW-SESSION.json 2>/dev/null || echo "0")
        echo "  📝 Interview session: $session_status ($total_questions questions)"
    fi
    
    [ -f docs/REQUIREMENTS.md ] && echo "  ✓ docs/REQUIREMENTS.md exists" || echo "  ✗ docs/REQUIREMENTS.md missing"
    [ -f docs/QUESTIONS.md ] && echo "  ✓ docs/QUESTIONS.md exists" || echo "  ✗ docs/QUESTIONS.md missing"
    [ -f docs/PLAN.md ] && echo "  ✓ docs/PLAN.md exists" || echo "  ✗ docs/PLAN.md missing"
    echo
}

# Function to open file with editor
open_with_editor() {
    local file="$1"
    local editor_choice="$2"
    local saved_editor=$(get_saved_editor)
    
    # If no editor choice provided and we have a saved preference, use it
    if [ -z "$editor_choice" ] && [ -n "$saved_editor" ]; then
        editor_choice=$saved_editor
    fi
    
    # If still no editor choice, prompt
    if [ -z "$editor_choice" ]; then
        echo "What editor would you like to use?"
        echo "  1) nano (default)"
        echo "  2) vim"
        echo "  3) code (VS Code)"
        echo "  4) cursor"
        echo "  5) other"
        echo
        read -p "Enter your choice [1]: " editor_choice
        editor_choice=${editor_choice:-1}
    fi
    
    case $editor_choice in
        1|""|nano)
            save_editor_preference "nano"
            nano "$file"
            ;;
        2|vim)
            save_editor_preference "vim"
            vim "$file"
            ;;
        3|code)
            save_editor_preference "code"
            code . && sleep 2 && code "$file"
            echo "Opening in VS Code. Please edit the file, then press Enter to continue..."
            read -n 1 -s
            ;;
        4|cursor)
            save_editor_preference "cursor"
            cursor . && sleep 2 && cursor "$file"
            echo "Opening in Cursor. Please edit the file, then press Enter to continue..."
            read -n 1 -s
            ;;
        5|other)
            read -p "Enter editor command: " custom_editor
            save_editor_preference "$custom_editor"
            $custom_editor "$file"
            echo "Please edit the file, then press Enter to continue..."
            read -n 1 -s
            ;;
        *)
            # Use the saved editor as a command
            save_editor_preference "$editor_choice"
            $editor_choice "$file"
            echo "Please edit the file, then press Enter to continue..."
            read -n 1 -s
            ;;
    esac
}

# Check dependencies first
check_dependencies

# Function to check for updates (non-blocking)
check_for_updates() {
    # Only check if we can reach npm registry quickly
    if timeout 2 npm view claude-fsd version >/dev/null 2>&1; then
        local current_version=$(npm list -g claude-fsd --depth=0 2>/dev/null | grep claude-fsd | sed 's/.*@//')
        local latest_version=$(timeout 2 npm view claude-fsd version 2>/dev/null)
        
        if [ -n "$current_version" ] && [ -n "$latest_version" ] && [ "$current_version" != "$latest_version" ]; then
            echo -e "${YELLOW}📦 Update available: claude-fsd $current_version → $latest_version${NC}"
            echo -e "${YELLOW}   Run: npm update -g claude-fsd${NC}"
            echo
        fi
    fi
}

# Check for updates (quick, non-blocking)
check_for_updates

# If no arguments provided, show interactive menu
if [ $# -eq 0 ]; then
    show_menu
    default_choice=$(get_default_choice)
    read -p "Enter your choice [$default_choice]: " choice
    choice=${choice:-$default_choice}  # Use smart default
    
    case $choice in
        0)
            if [ ! -f BRIEF.md ]; then
                echo -e "${GREEN}Creating project brief...${NC}"
                echo
                echo "# Project Brief" > BRIEF.md
                echo "" >> BRIEF.md
                echo "## Vision" >> BRIEF.md
                echo "Describe the big picture vision and what you want to achieve..." >> BRIEF.md
                echo "" >> BRIEF.md
                echo "## Core Requirements" >> BRIEF.md
                echo "- Core requirement 1" >> BRIEF.md
                echo "- Core requirement 2" >> BRIEF.md
                echo "" >> BRIEF.md
                echo "## Key Features" >> BRIEF.md
                echo "- Feature 1" >> BRIEF.md
                echo "- Feature 2" >> BRIEF.md
                echo "" >> BRIEF.md
                echo "## Success Criteria" >> BRIEF.md
                echo "- Success criterion 1" >> BRIEF.md
                echo "- Success criterion 2" >> BRIEF.md
                
                open_with_editor "BRIEF.md"
                echo
                echo -e "${GREEN}Brief created! Run claudefsd again to start the interview.${NC}"
            else
                echo -e "${RED}BRIEF.md already exists!${NC}"
                exit 1
            fi
            ;;
        1)
            # Interactive interview
            if [ ! -f BRIEF.md ]; then
                echo -e "${RED}No BRIEF.md found. Please create a project brief first.${NC}"
                exit 1
            fi
            echo -e "${GREEN}Starting interactive interview...${NC}"
            echo
            exec "$(dirname "$0")/claudefsd-interview"
            ;;
        2)
            # Batch questions
            echo -e "${GREEN}Analyzing brief and generating questions (batch mode)...${NC}"
            echo
            "$(dirname "$0")/claudefsd-analyze-brief"
            
            if [ $? -eq 0 ]; then
                echo
                echo -e "${GREEN}Questions generated in docs/QUESTIONS.md${NC}"
                echo "Please answer the questions, then run claudefsd again to create the plan."
                echo
                
                open_with_editor "docs/QUESTIONS.md"
                
                echo
                echo -e "${GREEN}Questions saved. After answering them, run 'claudefsd' again and select option 3 to create the plan.${NC}"
            fi
            ;;
        3)
            # Create plan - check what source to use
            if [ -f docs/REQUIREMENTS.md ]; then
                echo -e "${GREEN}Creating plan from requirements...${NC}"
                echo
                # Use requirements-based planning
                exec "$(dirname "$0")/claudefsd-create-plan-from-requirements"
            elif [ -f docs/QUESTIONS.md ]; then
                echo -e "${GREEN}Creating plan from answered questions...${NC}"
                echo
                exec "$(dirname "$0")/claudefsd-create-plan"
            else
                echo -e "${RED}No requirements or questions found. Please run the interview or generate questions first.${NC}"
                exit 1
            fi
            ;;
        4)
            echo -e "${GREEN}Starting development mode...${NC}"
            echo
            exec "$(dirname "$0")/claudefsd-dev"
            ;;
        5)
            echo "Goodbye!"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice. Please run again.${NC}"
            exit 1
            ;;
    esac
else
    # If arguments provided, pass them through to the appropriate command
    case "$1" in
        interview)
            shift
            exec "$(dirname "$0")/claudefsd-interview" "$@"
            ;;
        dev|run)
            shift
            exec "$(dirname "$0")/claudefsd-dev" "$@"
            ;;
        analyze-brief)
            shift
            exec "$(dirname "$0")/claudefsd-analyze-brief" "$@"
            ;;
        create-plan)
            shift
            exec "$(dirname "$0")/claudefsd-create-plan" "$@"
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo
            echo "Usage: claudefsd [command]"
            echo
            echo "Commands:"
            echo "  interview     - Interactive requirements gathering"
            echo "  analyze-brief - Analyze brief and generate questions (legacy)"
            echo "  create-plan   - Create plan from requirements or questions"
            echo "  dev|run       - Run development mode"
            echo
            echo "Run without arguments for interactive mode."
            exit 1
            ;;
    esac
fi